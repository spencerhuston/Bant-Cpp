<type> ::= <ident>
		| <type> '->' <type>
		| '('[<type>[','<type>]*]')' '->' <type>
		| 'List' '[' <type> ']'
		| 'Tuple' '[' <type> ']'
		| 'type' <ident>

<op> ::= [ '*' | '/' | '+' | '-' | '<' | '>' | '!' | '==' | '!=' | '<=' | '>=' | '&&' | '||' ]

<char> ::= ''' [ character ] '''

<string> ::= '"' [ character* ] '"'

<bool> ::= 'true' | 'false'

<atom> ::= <number> | <bool> | 'null' | <char> | <string>
		| '('<simp>')'
		| <ident>['.'<ident>]*

<tight> ::= <atom>[ ['('[<simp>[','<simp>]*]')']* ] | [ '['<simp>']' ]+
		| '{'<exp>'}'

<utight> ::= [<op>]<tight>

<arg> ::= <ident>':'<type>['='<atom>]

<typeclass> ::= 'type' <ident> '{' [<ident>':'<type> '=' <atom>[','<ident>':'<type> '=' <atom>]*] '}'

<prog> ::= ['func' <ident>'<'<type> [',' <type> ]* '>' '('[<arg>[','<arg>]*]')'['->' <type>] '=' <simp>';' ]* 

<simp> ::= <utight>[<op><utight>]*
		| 'if' '('<simp>')' <simp> ['else' <simp>]
		| 'List' '{'[<simp>[','<simp>]*]'}'
		| 'Tuple '{'[<simp>[','<simp>]*]'}'
		| 'match' '('<ident>')' '{' ['case' <atom> '=' { <simp> }; ]* ['case' 'any' '=' { <simp> }; ] '}'
		| <typeclass>
		| <prog> <exp>

<exp> ::= <simp>[;<exp>]
		| 'val' <ident> ':' <type> '=' <simp>';' <exp>