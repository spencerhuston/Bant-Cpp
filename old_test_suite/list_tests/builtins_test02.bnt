func equals[T](l1: List[T], l2: List[T], curr: int) -> bool = {
	if (size(l1) != size(l2))
		false
	else if (size(l1) == curr)
		true
	else if (l1[curr] != l2[curr])
		false
	else
		equals(l1, l2, curr + 1)
};

val l1 : List[int] = new List { 1, 2, 3 };
printList(l1);

val l2 : List[int] = reverse(l1);
printList(l2);

val l3 : List[int] = reverse(l2);
printList(l3);

val b1 : bool = equals(fill(6, 3), new List { sum(l1), sum(l2), sum(l3) }, 0);
if (b1) printChar('y') else printChar('n');
printChar('\n');

val l4 : List[int] = combine(filter(l3, func f(x: int) -> bool = true; f), 
			     map(l3, func f(x: int) -> int = x + size(l3); f));
printList(l4);

val l5 : List[int] = new List { charToInt(readChar()), charToInt(readChar()), charToInt(readChar()) };
printList(l5);

val i1 : int = foldl(l5, func f(x: int, y: int) -> int = if (x % 2 == 0) x * y else x + y; f);
printChar(intToChar((i1 % (127 - 44)) + 44));
printChar('\n');

val l6 : List[int] = union(intersect(l1, l3), l4);
printList(l6);

val l7 : List[char] = new List { 't','e','s','t','.','b','n','t' };

if (equals(range(l7, find(l7, '.'), size(l7) - 1), new List { '.','b','n','t' }, 0))
	printChar('y')
else
	printChar('n');
printChar('\n')
